// app/components/CongressionalTracker.tsx
"use client";

import { useEffect, useMemo, useState } from "react";

type Chamber = "senate" | "house";
type TradeRow = Record<string, any>; // loose to survive minor schema differences

function clsJoin(...parts: Array<string | false | null | undefined>) {
  return parts.filter(Boolean).join(" ");
}

function formatAmount(v: unknown) {
  if (typeof v === "number") return v.toLocaleString();
  if (typeof v === "string") return v;
  return "—";
}

export default function CongressionalTracker() {
  const [chamber, setChamber] = useState<Chamber>("senate");
  const [symbol, setSymbol] = useState("");
  const [from, setFrom] = useState(() => {
    const d = new Date();
    d.setMonth(d.getMonth() - 3);
    return d.toISOString().slice(0, 10);
  });
  const [to, setTo] = useState(() => new Date().toISOString().slice(0, 10));
  const [rows, setRows] = useState<TradeRow[]>([]);
  const [loading, setLoading] = useState(false);
  const [err, setErr] = useState<string | null>(null);

  async function load() {
    setLoading(true);
    setErr(null);
    try {
      const qs = new URLSearchParams();
      qs.set("chamber", chamber);
      if (symbol.trim()) qs.set("symbol", symbol.trim().toUpperCase());
      if (from) qs.set("from", from);
      if (to) qs.set("to", to);

      const r = await fetch(`/api/congress?${qs.toString()}`, { cache: "no-store" });
      const j = await r.json();
      if (!r.ok || j?.ok === false) throw new Error(j?.error || "Failed to load data");
      setRows(Array.isArray(j.rows) ? j.rows : []);
    } catch (e: any) {
      setErr(e?.message || "Unexpected error");
      setRows([]);
    } finally {
      setLoading(false);
    }
  }

  // Guess a useful default column order; gracefully handle missing keys
  const columns = useMemo(() => {
    const preferred = [
      "transactionDate",
      "disclosureDate",
      "name",            // senator/representative
      "representative",  // sometimes used by house
      "senator",         // sometimes used by senate
      "party",
      "district",
      "assetName",
      "asset",
      "symbol",
      "type",
      "owner",
      "amount",
      "amountRange",
      "comment",
    ];
    const dyn = new Set<string>();
    rows.slice(0, 5).forEach((r) => Object.keys(r || {}).forEach((k) => dyn.add(k)));
    const all = [...preferred, ...Array.from(dyn)];
    // de-dup while preserving order
    return Array.from(new Set(all));
  }, [rows]);

  return (
    <div className="space-y-4">
      <section className="rounded-2xl border bg-white p-4 md:p-5">
        <div className="grid gap-3 md:grid-cols-[minmax(140px,1fr)_minmax(140px,1fr)_repeat(2,minmax(120px,1fr))_auto]">
          <div>
            <div className="mb-1 text-xs text-gray-700">Chamber</div>
            <select
              value={chamber}
              onChange={(e) => setChamber(e.target.value as Chamber)}
              className="w-full rounded-md border px-3 py-2"
            >
              <option value="senate">Senate</option>
              <option value="house">House</option>
            </select>
          </div>

          <div>
            <div className="mb-1 text-xs text-gray-700">Symbol (optional)</div>
            <input
              value={symbol}
              onChange={(e) => setSymbol(e.target.value.toUpperCase())}
              placeholder="e.g., NVDA"
              className="w-full rounded-md border px-3 py-2"
            />
          </div>

          <div>
            <div className="mb-1 text-xs text-gray-700">From</div>
            <input type="date" value={from} onChange={(e) => setFrom(e.target.value)} className="w-full rounded-md border px-3 py-2" />
          </div>

          <div>
            <div className="mb-1 text-xs text-gray-700">To</div>
            <input type="date" value={to} onChange={(e) => setTo(e.target.value)} className="w-full rounded-md border px-3 py-2" />
          </div>

          <div className="flex items-end">
            <button
              onClick={load}
              disabled={loading}
              className="rounded-md bg-black px-4 py-2 text-sm text-white disabled:opacity-60"
            >
              {loading ? "Loading…" : "Load"}
            </button>
          </div>
        </div>

        <p className="mt-2 text-xs text-gray-500">
          Data via FMP {chamber === "senate" ? "Senate" : "House"} Trading API. Try a symbol or leave blank for recent trades.
        </p>

        {err && (
          <div className="mt-3 rounded-md border border-rose-200 bg-rose-50 px-3 py-2 text-sm text-rose-700">
            {err}
          </div>
        )}
      </section>

      {/* Table */}
      <section className="rounded-2xl border bg-white p-0 overflow-x-auto">
        <table className="min-w-full text-sm">
          <thead className="bg-gray-50 text-gray-700">
            <tr>
              {columns.map((c) => (
                <th key={c} className="px-3 py-2 text-left font-medium whitespace-nowrap border-b">{c}</th>
              ))}
            </tr>
          </thead>
          <tbody>
            {rows.length === 0 ? (
              <tr>
                <td colSpan={columns.length} className="px-4 py-8 text-center text-gray-500">
                  No data yet. Set your filters and click <b>Load</b>.
                </td>
              </tr>
            ) : (
              rows.map((r, i) => (
                <tr key={i} className={clsJoin(i % 2 === 0 && "bg-white", i % 2 === 1 && "bg-gray-50")}>
                  {columns.map((c) => {
                    let v = r?.[c];
                    if (c.toLowerCase().includes("amount")) v = formatAmount(v);
                    return (
                      <td key={c} className="px-3 py-2 text-gray-900 border-b whitespace-nowrap">
                        {v ?? "—"}
                      </td>
                    );
                  })}
                </tr>
              ))
            )}
          </tbody>
        </table>
      </section>
    </div>
  );
}