// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // Uses your new storage_ env var naming
  url      = env("storage_PRISMA_DATABASE_URL")
}

//////////////////////////////////////////////////////////
// ENUMS
//////////////////////////////////////////////////////////

enum Role {
  USER
  ADMIN
}

//////////////////////////////////////////////////////////
// MODELS
//////////////////////////////////////////////////////////

model User {
  id               String    @id @default(cuid())
  name             String?
  email            String?   @unique
  emailVerified    DateTime?
  image            String?
  password         String?   // for credentials-based auth
  role             Role      @default(USER)
  stripeCustomerId String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  // Relations
  accounts         Account[]
  sessions         Session[]
  subscriptions    Subscription[]  // <-- âœ… back relation added
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

//////////////////////////////////////////////////////////
// STRIPE SUBSCRIPTIONS (OPTIONAL)
//////////////////////////////////////////////////////////

model Subscription {
  id                     String   @id @default(cuid())
  userId                 String
  stripeSubscriptionId   String   @unique
  stripeCustomerId       String
  stripePriceId          String?
  stripeCurrentPeriodEnd DateTime?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

//////////////////////////////////////////////////////////
// (Optional) Example custom model for your app
//////////////////////////////////////////////////////////

// model Watchlist {
//   id        String   @id @default(cuid())
//   userId    String
//   symbol    String
//   createdAt DateTime @default(now())
//
//   user User @relation(fields: [userId], references: [id], onDelete: Cascade)
// }